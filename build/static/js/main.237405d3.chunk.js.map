{"version":3,"sources":["PasswordGenerator.js","App.js","serviceWorker.js","index.js"],"names":["PasswordGenerator","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setPasswordLength","event","target","value","setState","length","populateScramble","toggleBoxes","defineProperty","name","state","scrambleString","uppers","lowers","nums","symbols","scramble","split","generateNewPassword","newPassword","i","rando","Math","floor","random","password","react_default","a","createElement","className","type","onChange","placeholder","checked","React","Component","App","src_PasswordGenerator","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.237405d3.chunk.js","sourcesContent":["import React from 'react';\n\nclass PasswordGenerator extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      password: '',\n      length: 0,\n      scramble: [],\n      uppers: true,\n      lowers: true,\n      nums: true,\n      symbols: true\n    }\n  }\n\n  componentDidMount() {\n    this.populateScramble()\n  }\n\n  setPasswordLength = (event) => {\n    if (event.target.value < 0) {\n      event.target.value = 0;\n    }\n    this.setState({\n      length: event.target.value\n    }, () => this.populateScramble())\n  }\n\n  toggleBoxes = (event) => {\n    this.setState({\n      [event.target.name]: !this.state[event.target.name]\n    }, () => this.populateScramble())\n  }\n\n  populateScramble = () => {\n    let scrambleString = '';\n    if (this.state.uppers) {\n      scrambleString += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    }\n    if (this.state.lowers) {\n      scrambleString += 'abcdefghijklmnopqrstuvwxyz';\n    }\n    if (this.state.nums) {\n      scrambleString += '0123456789';\n    }\n    if (this.state.symbols) {\n      scrambleString += '!@#$%^&*';\n    }\n    this.setState({\n      scramble: scrambleString.split('')\n    }, () => this.generateNewPassword())\n  }\n\n  generateNewPassword = () => {\n    let newPassword = ''\n    for (let i = 0; i < this.state.length; i++) {\n      const rando = Math.floor(Math.random() * Math.floor(this.state.scramble.length))\n      newPassword += this.state.scramble[rando];\n    }\n    this.setState({\n      password: newPassword\n    })\n  }\n\n  render() {\n    return(\n      <div>\n        <h3>{this.state.password || 'Password'}</h3>\n        <input className='length-input' value={this.state.length} type='number' onChange={this.setPasswordLength} placeholder={'Set Password Length'}/>\n        <form>\n          <label>\n            <input type={'checkbox'} name={'uppers'} checked={this.state.uppers} onChange={this.toggleBoxes}/>\n            A-Z\n          </label>\n          <label>\n            <input type={'checkbox'} name={'lowers'} checked={this.state.lowers} onChange={this.toggleBoxes}/>\n            a-z\n          </label>\n          <label>\n            <input type={'checkbox'} name={'nums'} checked={this.state.nums} onChange={this.toggleBoxes}/>\n            0-9\n          </label>\n          <label>\n            <input type={'checkbox'} name={'symbols'} checked={this.state.symbols} onChange={this.toggleBoxes}/>\n            !@#$%^&*\n          </label>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default PasswordGenerator;","import React from 'react';\nimport PasswordGenerator from './PasswordGenerator'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Generate Password</h1>\n      </header>\n      <PasswordGenerator/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}